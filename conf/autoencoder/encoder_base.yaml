
# _target_: src.utils.make_dict_pipeline
# steps_dict:
#     image_preprocessor:
#         _target_: src.preprocessing.SitkImageProcessor
#         data_dir: ${feature_dataset.data_dir}
#         image_stems: ${feature_dataset.image_stems}
#         mask_stem: ${feature_dataset.mask_stem}
#     autoencoder:
_target_: src.models.NeuralNetEncoder
max_epochs: 100
verbose: 1
output_format: pandas
optimizer: torch.optim.Adam
criterion: src.models.BetaVAELoss

iterator_train: src.dataset.transforming_dataloader.TransformingDataLoader
iterator_train__shuffle: true
iterator_train__augment_transforms:
    _target_: torchio.Compose
    transforms:
        - _target_: torchio.RandomGamma
          log_gamma: 0.1
          label_keys: [mask]
        - _target_: torchio.RandomAffine
          p: 0.5
          label_keys: [mask]
          scales: 0.1
          degrees: 90
          translation: 10
          isotropic: True
        - _target_: torchio.RandomFlip
          flip_probability: 0.5
          label_keys: [mask]
          axes: [0,1,2]

dataset: src.dataset.skorch_subject_ds.SkorchSubjectsDataset
dataset__data_dir: ${feature_dataset.data_dir}
dataset__image_stems: ${feature_dataset.image_stems}
dataset__mask_stem: ${feature_dataset.mask_stem}
dataset__transform:
    _target_: torchio.Compose
    transforms:
        - _target_: torchio.Resample
          target: 1
        - _target_: torchio.ToCanonical
        - _target_: torchio.Mask
          masking_method: mask
          outside_value: 0
        - _target_: torchio.CropOrPad
          target_shape: [88,88,88]
          mask_name: mask
        - _target_: torchio.Resize
          target_shape: [50,50,50]
        - _target_: torchio.ZNormalization
          masking_method: mask

callbacks:
    - _target_: skorch.callbacks.EarlyStopping
      load_best: True
    - _target_: skorch.callbacks.GradientNormClipping
      gradient_clip_value: 1





